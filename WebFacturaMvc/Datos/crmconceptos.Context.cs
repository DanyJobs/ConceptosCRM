//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebFacturaMvc.Datos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class crmconceptoseEntities1 : DbContext
    {
        public crmconceptoseEntities1()
            : base("name=crmconceptoseEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<categoria> categoria { get; set; }
        public virtual DbSet<cotizacion> cotizacion { get; set; }
        public virtual DbSet<factura> factura { get; set; }
        public virtual DbSet<marca> marca { get; set; }
        public virtual DbSet<modoPago> modoPago { get; set; }
        public virtual DbSet<tipoEmpleado> tipoEmpleado { get; set; }
        public virtual DbSet<compra> compra { get; set; }
        public virtual DbSet<compraDetalle> compraDetalle { get; set; }
        public virtual DbSet<existencia> existencia { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<sucursal> sucursal { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<proveedor> proveedor { get; set; }
        public virtual DbSet<cliente> cliente { get; set; }
        public virtual DbSet<producto> producto { get; set; }
        public virtual DbSet<Moneda> Moneda { get; set; }
        public virtual DbSet<configuracion> configuracion { get; set; }
        public virtual DbSet<texto> texto { get; set; }
        public virtual DbSet<detalleCotizacion> detalleCotizacion { get; set; }
    
        public virtual int reporte_factura(string idPedido)
        {
            var idPedidoParameter = idPedido != null ?
                new ObjectParameter("idPedido", idPedido) :
                new ObjectParameter("idPedido", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("reporte_factura", idPedidoParameter);
        }
    
        public virtual ObjectResult<SP_COTIZACION_HISTORIAL_Result> SP_COTIZACION_HISTORIAL(string idProducto)
        {
            var idProductoParameter = idProducto != null ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_COTIZACION_HISTORIAL_Result>("SP_COTIZACION_HISTORIAL", idProductoParameter);
        }
    
        public virtual int SP_COTIZACION_HISTORIAL_TODO()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_COTIZACION_HISTORIAL_TODO");
        }
    
        public virtual ObjectResult<sp_lista_clientes_Result> sp_lista_clientes(Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter pageCount)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("pageIndex", pageIndex) :
                new ObjectParameter("pageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_lista_clientes_Result>("sp_lista_clientes", pageIndexParameter, pageSizeParameter, pageCount);
        }
    
        public virtual ObjectResult<sp_producto_categoria_Result> sp_producto_categoria(string idCategoria)
        {
            var idCategoriaParameter = idCategoria != null ?
                new ObjectParameter("idCategoria", idCategoria) :
                new ObjectParameter("idCategoria", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_producto_categoria_Result>("sp_producto_categoria", idCategoriaParameter);
        }
    
        public virtual ObjectResult<SP_PRODUCTO_CONSULTA_Result> SP_PRODUCTO_CONSULTA()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PRODUCTO_CONSULTA_Result>("SP_PRODUCTO_CONSULTA");
        }
    
        public virtual int sp_reporte_venta(Nullable<decimal> idVenta)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("idVenta", idVenta) :
                new ObjectParameter("idVenta", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_reporte_venta", idVentaParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<SP_Buscar_Cotizacion_Result> SP_Buscar_Cotizacion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Buscar_Cotizacion_Result>("SP_Buscar_Cotizacion");
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spAgregarCompra(Nullable<int> idCompra, Nullable<decimal> total, Nullable<System.DateTime> fechaCompra, Nullable<int> idSucursal, Nullable<int> idProveedor)
        {
            var idCompraParameter = idCompra.HasValue ?
                new ObjectParameter("idCompra", idCompra) :
                new ObjectParameter("idCompra", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            var fechaCompraParameter = fechaCompra.HasValue ?
                new ObjectParameter("fechaCompra", fechaCompra) :
                new ObjectParameter("fechaCompra", typeof(System.DateTime));
    
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("idSucursal", idSucursal) :
                new ObjectParameter("idSucursal", typeof(int));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("idProveedor", idProveedor) :
                new ObjectParameter("idProveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarCompra", idCompraParameter, totalParameter, fechaCompraParameter, idSucursalParameter, idProveedorParameter);
        }
    
        public virtual int spAgregarCompraDetalle(Nullable<int> idCompra, Nullable<int> idProducto, Nullable<int> cantidad, Nullable<int> precio)
        {
            var idCompraParameter = idCompra.HasValue ?
                new ObjectParameter("idCompra", idCompra) :
                new ObjectParameter("idCompra", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarCompraDetalle", idCompraParameter, idProductoParameter, cantidadParameter, precioParameter);
        }
    
        public virtual int spAgregarProveedor(Nullable<int> idProveedor, string nombre, string calle, string numExt, string colonia, string cp, string email, string telefono, string app, string apm)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("idProveedor", idProveedor) :
                new ObjectParameter("idProveedor", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var calleParameter = calle != null ?
                new ObjectParameter("calle", calle) :
                new ObjectParameter("calle", typeof(string));
    
            var numExtParameter = numExt != null ?
                new ObjectParameter("numExt", numExt) :
                new ObjectParameter("numExt", typeof(string));
    
            var coloniaParameter = colonia != null ?
                new ObjectParameter("colonia", colonia) :
                new ObjectParameter("colonia", typeof(string));
    
            var cpParameter = cp != null ?
                new ObjectParameter("cp", cp) :
                new ObjectParameter("cp", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var appParameter = app != null ?
                new ObjectParameter("app", app) :
                new ObjectParameter("app", typeof(string));
    
            var apmParameter = apm != null ?
                new ObjectParameter("apm", apm) :
                new ObjectParameter("apm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarProveedor", idProveedorParameter, nombreParameter, calleParameter, numExtParameter, coloniaParameter, cpParameter, emailParameter, telefonoParameter, appParameter, apmParameter);
        }
    
        public virtual int spAgregarSucursal(Nullable<int> idSucursal, string calle, string numExt, string colonia, string cp, string email, string telefono)
        {
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("IdSucursal", idSucursal) :
                new ObjectParameter("IdSucursal", typeof(int));
    
            var calleParameter = calle != null ?
                new ObjectParameter("Calle", calle) :
                new ObjectParameter("Calle", typeof(string));
    
            var numExtParameter = numExt != null ?
                new ObjectParameter("NumExt", numExt) :
                new ObjectParameter("NumExt", typeof(string));
    
            var coloniaParameter = colonia != null ?
                new ObjectParameter("Colonia", colonia) :
                new ObjectParameter("Colonia", typeof(string));
    
            var cpParameter = cp != null ?
                new ObjectParameter("Cp", cp) :
                new ObjectParameter("Cp", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarSucursal", idSucursalParameter, calleParameter, numExtParameter, coloniaParameter, cpParameter, emailParameter, telefonoParameter);
        }
    
        public virtual ObjectResult<spusuario_Result> spusuario()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spusuario_Result>("spusuario");
        }
    
        public virtual ObjectResult<string> sp_consultaEmailCliente(Nullable<decimal> idVenta)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("idVenta", idVenta) :
                new ObjectParameter("idVenta", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_consultaEmailCliente", idVentaParameter);
        }
    
        public virtual int sp_CompraAlta(Nullable<decimal> total, Nullable<System.DateTime> fechaCompra, Nullable<int> idSucursal, Nullable<int> idProveedor)
        {
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            var fechaCompraParameter = fechaCompra.HasValue ?
                new ObjectParameter("fechaCompra", fechaCompra) :
                new ObjectParameter("fechaCompra", typeof(System.DateTime));
    
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("idSucursal", idSucursal) :
                new ObjectParameter("idSucursal", typeof(int));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("idProveedor", idProveedor) :
                new ObjectParameter("idProveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CompraAlta", totalParameter, fechaCompraParameter, idSucursalParameter, idProveedorParameter);
        }
    
        public virtual int sp_CompraDetalleAlta(Nullable<int> idcompra, Nullable<decimal> precio, string idproducto, Nullable<int> cantidad)
        {
            var idcompraParameter = idcompra.HasValue ?
                new ObjectParameter("idcompra", idcompra) :
                new ObjectParameter("idcompra", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            var idproductoParameter = idproducto != null ?
                new ObjectParameter("idproducto", idproducto) :
                new ObjectParameter("idproducto", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CompraDetalleAlta", idcompraParameter, precioParameter, idproductoParameter, cantidadParameter);
        }
    
        public virtual ObjectResult<sp_consultaExistencias_Result> sp_consultaExistencias()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_consultaExistencias_Result>("sp_consultaExistencias");
        }
    
        public virtual ObjectResult<sp_consultaExistenciasSucursal_Result> sp_consultaExistenciasSucursal(Nullable<int> idSucursal)
        {
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("idSucursal", idSucursal) :
                new ObjectParameter("idSucursal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_consultaExistenciasSucursal_Result>("sp_consultaExistenciasSucursal", idSucursalParameter);
        }
    
        public virtual ObjectResult<sp_consultaSucursal_Result> sp_consultaSucursal(Nullable<int> idSucursal)
        {
            var idSucursalParameter = idSucursal.HasValue ?
                new ObjectParameter("idSucursal", idSucursal) :
                new ObjectParameter("idSucursal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_consultaSucursal_Result>("sp_consultaSucursal", idSucursalParameter);
        }
    
        public virtual ObjectResult<sp_consultaSucursales_Result> sp_consultaSucursales()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_consultaSucursales_Result>("sp_consultaSucursales");
        }
    
        public virtual ObjectResult<SP_PRODUCTO_CONSULTA_cotizacion_Result> SP_PRODUCTO_CONSULTA_cotizacion(string idProducto)
        {
            var idProductoParameter = idProducto != null ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PRODUCTO_CONSULTA_cotizacion_Result>("SP_PRODUCTO_CONSULTA_cotizacion", idProductoParameter);
        }
    
        public virtual ObjectResult<sp_obtenercliente_Result> sp_obtenercliente(Nullable<decimal> codigo, string nombre, string apellido, string email)
        {
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(decimal));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_obtenercliente_Result>("sp_obtenercliente", codigoParameter, nombreParameter, apellidoParameter, emailParameter);
        }
    
        public virtual ObjectResult<sp_obtenerexistencia_Result> sp_obtenerexistencia(string producto, Nullable<int> sucursal)
        {
            var productoParameter = producto != null ?
                new ObjectParameter("producto", producto) :
                new ObjectParameter("producto", typeof(string));
    
            var sucursalParameter = sucursal.HasValue ?
                new ObjectParameter("sucursal", sucursal) :
                new ObjectParameter("sucursal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_obtenerexistencia_Result>("sp_obtenerexistencia", productoParameter, sucursalParameter);
        }
    
        public virtual int sp_actualizarCotizacion(Nullable<int> idVenta, Nullable<float> total, Nullable<int> idCliente, string idVendedor, Nullable<System.DateTime> fecha, Nullable<decimal> iVA, string notas, string notasCompras, string estatus)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("IdVenta", idVenta) :
                new ObjectParameter("IdVenta", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(float));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idVendedorParameter = idVendedor != null ?
                new ObjectParameter("IdVendedor", idVendedor) :
                new ObjectParameter("IdVendedor", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var iVAParameter = iVA.HasValue ?
                new ObjectParameter("IVA", iVA) :
                new ObjectParameter("IVA", typeof(decimal));
    
            var notasParameter = notas != null ?
                new ObjectParameter("Notas", notas) :
                new ObjectParameter("Notas", typeof(string));
    
            var notasComprasParameter = notasCompras != null ?
                new ObjectParameter("NotasCompras", notasCompras) :
                new ObjectParameter("NotasCompras", typeof(string));
    
            var estatusParameter = estatus != null ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_actualizarCotizacion", idVentaParameter, totalParameter, idClienteParameter, idVendedorParameter, fechaParameter, iVAParameter, notasParameter, notasComprasParameter, estatusParameter);
        }
    
        public virtual int sp_actualizarDetalleCotizacion(Nullable<int> idVenta, Nullable<float> subTotal, string idProducto, Nullable<decimal> descuento, Nullable<int> cantidad)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("IdVenta", idVenta) :
                new ObjectParameter("IdVenta", typeof(int));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(float));
    
            var idProductoParameter = idProducto != null ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(string));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_actualizarDetalleCotizacion", idVentaParameter, subTotalParameter, idProductoParameter, descuentoParameter, cantidadParameter);
        }
    
        public virtual ObjectResult<sp_CompraConsulta_Result> sp_CompraConsulta()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CompraConsulta_Result>("sp_CompraConsulta");
        }
    
        public virtual ObjectResult<sp_CompraConsultaIndividual_Result> sp_CompraConsultaIndividual(Nullable<int> idCompra)
        {
            var idCompraParameter = idCompra.HasValue ?
                new ObjectParameter("idCompra", idCompra) :
                new ObjectParameter("idCompra", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CompraConsultaIndividual_Result>("sp_CompraConsultaIndividual", idCompraParameter);
        }
    
        public virtual ObjectResult<sp_CompraDetalleConsulta_Result> sp_CompraDetalleConsulta(Nullable<int> idCompra)
        {
            var idCompraParameter = idCompra.HasValue ?
                new ObjectParameter("idCompra", idCompra) :
                new ObjectParameter("idCompra", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CompraDetalleConsulta_Result>("sp_CompraDetalleConsulta", idCompraParameter);
        }
    
        public virtual int sp_CompraEliminar(Nullable<int> idCompra)
        {
            var idCompraParameter = idCompra.HasValue ?
                new ObjectParameter("idCompra", idCompra) :
                new ObjectParameter("idCompra", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CompraEliminar", idCompraParameter);
        }
    
        public virtual ObjectResult<sp_CompraFiltrado_Result> sp_CompraFiltrado(string pMonth, string pYear)
        {
            var pMonthParameter = pMonth != null ?
                new ObjectParameter("pMonth", pMonth) :
                new ObjectParameter("pMonth", typeof(string));
    
            var pYearParameter = pYear != null ?
                new ObjectParameter("pYear", pYear) :
                new ObjectParameter("pYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CompraFiltrado_Result>("sp_CompraFiltrado", pMonthParameter, pYearParameter);
        }
    
        public virtual ObjectResult<sp_consultaCotizacion_Result> sp_consultaCotizacion(string pMonth, string pYear)
        {
            var pMonthParameter = pMonth != null ?
                new ObjectParameter("pMonth", pMonth) :
                new ObjectParameter("pMonth", typeof(string));
    
            var pYearParameter = pYear != null ?
                new ObjectParameter("pYear", pYear) :
                new ObjectParameter("pYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_consultaCotizacion_Result>("sp_consultaCotizacion", pMonthParameter, pYearParameter);
        }
    
        public virtual ObjectResult<sp_consultaCotizacionEstatus_Result> sp_consultaCotizacionEstatus(string month, string year, string estatus)
        {
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var estatusParameter = estatus != null ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_consultaCotizacionEstatus_Result>("sp_consultaCotizacionEstatus", monthParameter, yearParameter, estatusParameter);
        }
    
        public virtual ObjectResult<sp_consultaCotizacionIdVenta_Result> sp_consultaCotizacionIdVenta(Nullable<int> idVenta)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("idVenta", idVenta) :
                new ObjectParameter("idVenta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_consultaCotizacionIdVenta_Result>("sp_consultaCotizacionIdVenta", idVentaParameter);
        }
    
        public virtual ObjectResult<sp_consultaCotizacionIndividual_Result> sp_consultaCotizacionIndividual(Nullable<int> idVenta)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("idVenta", idVenta) :
                new ObjectParameter("idVenta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_consultaCotizacionIndividual_Result>("sp_consultaCotizacionIndividual", idVentaParameter);
        }
    
        public virtual ObjectResult<sp_consultaCotizacionProductos_Result> sp_consultaCotizacionProductos(Nullable<int> idVenta)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("IdVenta", idVenta) :
                new ObjectParameter("IdVenta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_consultaCotizacionProductos_Result>("sp_consultaCotizacionProductos", idVentaParameter);
        }
    
        public virtual ObjectResult<sp_consultaProducto_Result> sp_consultaProducto(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_consultaProducto_Result>("sp_consultaProducto", idProductoParameter);
        }
    
        public virtual ObjectResult<sp_CotizacionDetalleConsulta_Result> sp_CotizacionDetalleConsulta(Nullable<int> idVenta)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("IdVenta", idVenta) :
                new ObjectParameter("IdVenta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CotizacionDetalleConsulta_Result>("sp_CotizacionDetalleConsulta", idVentaParameter);
        }
    
        public virtual ObjectResult<SP_PRODUCTO_CONSULTA_COTIZACION1_Result> SP_PRODUCTO_CONSULTA_COTIZACION1(string idProducto)
        {
            var idProductoParameter = idProducto != null ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PRODUCTO_CONSULTA_COTIZACION1_Result>("SP_PRODUCTO_CONSULTA_COTIZACION1", idProductoParameter);
        }
    
        public virtual ObjectResult<SP_PRODUCTO_CONSULTA_COTIZACION_PRODUCTO_Result> SP_PRODUCTO_CONSULTA_COTIZACION_PRODUCTO(string idProducto)
        {
            var idProductoParameter = idProducto != null ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PRODUCTO_CONSULTA_COTIZACION_PRODUCTO_Result>("SP_PRODUCTO_CONSULTA_COTIZACION_PRODUCTO", idProductoParameter);
        }
    
        public virtual ObjectResult<SP_PRODUCTO_CONSULTA_FILTRADO_Result> SP_PRODUCTO_CONSULTA_FILTRADO(string idProducto, string nombre, string categoria, string idMarca)
        {
            var idProductoParameter = idProducto != null ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var categoriaParameter = categoria != null ?
                new ObjectParameter("categoria", categoria) :
                new ObjectParameter("categoria", typeof(string));
    
            var idMarcaParameter = idMarca != null ?
                new ObjectParameter("idMarca", idMarca) :
                new ObjectParameter("idMarca", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PRODUCTO_CONSULTA_FILTRADO_Result>("SP_PRODUCTO_CONSULTA_FILTRADO", idProductoParameter, nombreParameter, categoriaParameter, idMarcaParameter);
        }
    
        public virtual int sp_eliminarCotizacion(Nullable<int> idVenta)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("IdVenta", idVenta) :
                new ObjectParameter("IdVenta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_eliminarCotizacion", idVentaParameter);
        }
    
        public virtual int sp_preEliminarDC(Nullable<int> idVenta)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("IdVenta", idVenta) :
                new ObjectParameter("IdVenta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_preEliminarDC", idVentaParameter);
        }
    }
}
